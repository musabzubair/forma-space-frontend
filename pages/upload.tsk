// pages/upload.tsx
import { useState } from 'react';
import { useRouter } from 'next/router';

const styles = [
  { id: 'modern', name: 'Modern' },
  { id: 'minimalist', name: 'Minimalist' },
  { id: 'vintage', name: 'Vintage' },
  { id: 'industrial', name: 'Industrial' },
];

export default function Upload() {
  const router = useRouter();

  const [imageFile, setImageFile] = useState<File | null>(null);
  const [style, setStyle] = useState<string>(styles[0].id);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState('');

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setError('');
    const file = e.target.files?.[0];
    if (file) {
      if (!['image/jpeg', 'image/png', 'image/webp', 'image/gif'].includes(file.type)) {
        setError('Only JPEG, PNG, WEBP, GIF images are allowed.');
        setImageFile(null);
        return;
      }
      if (file.size > 5 * 1024 * 1024) {
        setError('File size must be less than 5MB.');
        setImageFile(null);
        return;
      }
      setImageFile(file);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (!imageFile) {
      setError('Please select an image to upload.');
      return;
    }

    setUploading(true);

    try {
      // Upload image first
      const formData = new FormData();
      formData.append('roomImage', imageFile);

      const uploadRes = await fetch('https://forma-space-backend.onrender.com/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      if (!uploadRes.ok) {
        throw new Error('Failed to upload image.');
      }

      const uploadData = await uploadRes.json();

      // Navigate to result page with query params
      router.push({
        pathname: '/result',
        query: { filePath: uploadData.filePath, style },
      });
    } catch (err: any) {
      setError(err.message || 'Something went wrong.');
      setUploading(false);
    }
  };

  return (
    <main className="min-h-screen flex flex-col items-center justify-center bg-gray-50 p-6">
      <h1 className="text-4xl font-bold mb-6 text-gray-900">Upload Your Room Image</h1>

      <form onSubmit={handleSubmit} className="w-full max-w-md bg-white p-8 rounded shadow-md">
        {error && <p className="mb-4 text-red-600">{error}</p>}

        <label className="block mb-4">
          <span className="text-gray-700 font-semibold">Select Image</span>
          <input
            type="file"
            accept="image/jpeg,image/png,image/webp,image/gif"
            onChange={handleFileChange}
            className="mt-2 block w-full"
          />
        </label>

        <label className="block mb-6">
          <span className="text-gray-700 font-semibold">Choose Style</span>
          <select
            value={style}
            onChange={(e) => setStyle(e.target.value)}
            className="mt-2 block w-full border border-gray-300 rounded p-2"
          >
            {styles.map((s) => (
              <option key={s.id} value={s.id}>
                {s.name}
              </option>
            ))}
          </select>
        </label>

        <button
          type="submit"
          disabled={uploading}
          className={`w-full py-3 rounded bg-indigo-600 text-white font-semibold hover:bg-indigo-700 transition ${
            uploading ? 'opacity-50 cursor-not-allowed' : ''
          }`}
        >
          {uploading ? 'Uploading...' : 'Submit'}
        </button>
      </form>
    </main>
  );
}
